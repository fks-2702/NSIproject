# -*- coding: utf-8 -*-
"""Guillaume Ferrisimo Maximumo 1ere NSI - Projet Convertisseur binaire graphique.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m4cOiMQdimo1-nBzlg1iG7aNoQ091QaX

<div style="width:100%;border-collapse:separate;border:solid 2px;border-radius:30px;border-color:blue;background-color:lightblue">
    <h1 style="width:100%;text-align:center;color:blue;">Projet convertisseur binaire graphique</h1>
</div>

<font color=red>**Les codes suivants seront exécutés à partir de Thonny**</font>

L'objectif de ce projet est de réaliser le défi 8 : la réalisation d'un convertisseur du décimal vers le binaire et du binaire vers le décimal.

![image.png](attachment:7e15baf2-ee26-40e5-9fae-700a0a49528e.png)

Pour cela, une prise en main de la bibliothèque Tkinter est proposée ci-dessous.

On pourra évidemment compléter cela avec d'autres fonctionnalités selon vos idées.

Ce projet sera réalisé en groupe de 2 ou 3 élèves.

Il sera évalué selon les critères suivants :  

|  |  |
|---|---|
| Répartition du travail | Précise et complète : 2 |
| | Imprécise ou incomplète : 1 |
| | Non fournie : 0 |
| Rédaction de la documentation | Complète et explicite : 2 |
| | Incomplète ou peu explicite : 1 |
| | Non fournie : 0 |
| Écriture du code | Valide totalement le cahier des charges : 10 |
| | Valide majoritairement le cahier des charges : 8 |
| |  Valide minoritairement le cahier des charges : 4 |
| | Ne valide pas le cahier des charges : 2 |
| | Code non fourni : 0 |
| Écriture du code | Le code est clair et structuré : 2 |
| | Le code est clair ou structuré : 1 |
| | Le code n’est ni clair ni structuré : 0 |
| Écriture du code | Le code est commenté et les docstring sont écrites : 2 |
| | Le code est en partie commenté : 1 |
| | Le code n’est pas commenté : 0 |
| Tests et exemples | Des tests complets et/ou exemples sont proposés : 2 |
| | Des tests partiels et/ou exemples sont proposés : 1 |
| | Aucun test ou exemple n'est proposé : 0 |

<div class="alert alert-success" role="alert" align="center"><h2>Prise en main de Tkinter</h2></div>

<h2 style="width:100%;text-align:right;color:blue;">
    Des fenêtres
</h2>

Pour créer une fenêtre minimale, trois lignes sont suffisantes.  
> Testez le code suivant :
"""

# on importe le module tkinter

from tkinter import *

# on crée la fenêtre principale
# on y accède par la variable fenetre (on aurait pu mettre un autre nom)

fenetre = Tk()

# voici la "boucle" qui lance l'observateur d'évenements
# le programme va "surveiller" la fenêtre en attendant une action

fenetre.mainloop()

"""<div class="alert alert-success" role="alert" align="center"><h2>Synthèse</h2></div>

- Comment s'appelle le module à importer ?
tkinter
- Quelle instruction permet de créer la fenêtre principale ? fenetre = Tk()
- Quelle instruction lance l'observateur d'événements ? fenetre.mainloop()

<h2 style="width:100%;text-align:right;color:blue;">
    Créer une fenêtre de dimensions données
</h2>

> Testez le code suivant :
"""

# on importe le module tkinter

from tkinter import *

# on crée la fenêtre principale

fenetre = Tk()

# on définit la taille de la fenêtre

fenetre.geometry("300x400")

# le titre

fenetre.title("Ma première fenêtre")

# voici la "boucle" qui lance l'observateur d'évenements
# le programme va "surveiller" la fenêtre en attendant une action

fenetre.mainloop()

"""<div class="alert alert-success" role="alert" align="center"><h2>Synthèse</h2></div>

- Comment indique-t-on la taille de la fenêtre ? fenetre.geometry
- La méthode `geometry` nécessite un argument, quel est son type ? La resolution de la fenetre
- Que signifient chacun des deux nombres présents dans cet argument ?
Le nombre de pixel en hauteur et en latgeur
- Quelle syntaxe utiliser pour donner un titre à votre fenêtre :
fenetre.titre("")

<h2 style="width:100%;text-align:right;color:blue;">
    Créer une fenêtre à un endroit spécifique de l’écran
</h2>

On complète le paramètre de la méthode `geometry`.  
![image.png](attachment:9062c95d-da5e-403c-bcd1-506bb392600b.png)

> Testez le code suivant :
"""

# on importe le module tkinter

from tkinter import *

# on crée la fenêtre principale

fenetre = Tk()

# on définit la taille de la fenêtre et le placement

fenetre.geometry("300x100+500+80")


# le titre

fenetre.title("Ma première fenêtre")

# voici la "boucle" qui lance l'observateur d'évenements
# le programme va "surveiller" la fenêtre en attendant une action

fenetre.mainloop()

"""<div class="alert alert-success" role="alert" align="center"><h2>Synthèse</h2></div>

- En Python, où est le point de cordonnées (0;0) sur l'écran ? …......................................................
- La méthode `geometry` : quelle forme donner au paramètre pour gérer la taille mais aussi le positionnement de la fenêtre ? …....................................................................................................
- Donner, dans l'ordre, le rôle des 4 nombres qui apparaissent dans le paramètre de la méthode `geometry` : …...................................................................................................................................
- Quels signes d'opération arithmétiques apparaissent dans l'argument ? …....................................

<h2 style="width:100%;text-align:left;color:darkorange;">
    Défi n˚ 1
</h2>

> Créez une fenêtre nommée « NSI rocks !! », de 150 px de largeur, 250 px de hauteur, située dans le coin en bas à droite de votre écran.
"""



"""<h2 style="width:100%;text-align:right;color:blue;">
    Des widgets
</h2>

### <font color=blue>Nos premiers widgets  </font>
Nous allons créer et placer sur la fenêtre des objets que l'on appelle des `widgets`.  
Commençons avec 3 objets de base : une zone de texte, une zone de saisie et un bouton.

> Testez le code suivant :
"""

from tkinter import *  # on importe le module tkinter

fenetre = Tk() # on crée la fenêtre principale, elle se nomme fenetre
fenetre.geometry("250x200")  # on définit la taille de la fenêtre
fenetre.title("Mes premiers widgets") # le titre de la fenêtre


# création des widgets

# zone de texte
monMessage = Label(fenetre,text = "Entrez votre adresse mail :")
# zone de saisie (input)
maZoneInput = Entry(fenetre)
# bouton envoyer de largeur 20 (attention 20 caractères, pas 20 px)
monBoutton = Button(fenetre,text = "Envoyer",width = 20)

# placement des widgets dans la fenêtre, dans l'ordre des lignes

monMessage.pack()
maZoneInput.pack()
monBoutton.pack()

fenetre.mainloop() # le programme va "surveiller" la fenêtre

"""<div class="alert alert-success" role="alert" align="center"><h2>Synthèse</h2></div>

- Quelle fonction utiliser pour créer une zone de texte ? …...............................................................
- Quelles sont ses paramètres ? …......................................................................................................
- Est-il possible de laisser la zone de texte vide ? Comment faire ? ….............................................
- Quelle fonction utiliser pour créer une zone de saisie ? …..............................................................
- Quelles sont ses paramètres ? …......................................................................................................
- Quelle fonction utiliser pour créer un bouton ? …..........................................................................
- Quelles sont ses paramètres ? …......................................................................................................
- Que se passe-t-il si on supprime son attribut width ? ….................................................................
- Quel est l'unité de width ? …..........................................................................................................
- Quelle fonction utiliser pour placer les widgets dans la fenêtre ? …..............................................
- Quelle est sa syntaxe ? …..............................................…..............................................................
- Dans quel ordre les widgets sont-ils placés ? …........…..................................................................

<h2 style="width:100%;text-align:left;color:darkorange;">
    Défi n˚ 2
</h2>

Modifier le programme suivant pour traduire notre interface en anglais (titre de la fenêtre, texte, bouton).
"""



"""<h2 style="width:100%;text-align:left;color:darkorange;">
    Défi n˚ 3
</h2>

Écrire les lignes de code nécessaires pour obtenir cette fenêtre :  
![image.png](attachment:852f1b4a-c155-4237-85be-e28f008a0f0a.png)
"""



"""<h2 style="width:100%;text-align:right;color:blue;">
    Effectuer une action simple via un bouton
</h2>

> Testez le code suivant :
"""

from tkinter import *  # on importe le module tkinter

# on définit une fonction sans argument qui indique
# ce qui va se passer lors du clic sur le bouton

def change():
    # si le bouton affiche "Bonjour"
    if monBouton["text"] == "Bonjour":
        # on change le texte
        monBouton["text"] = "Au revoir !"
        # on modifie la taille
        monBouton["width"] = 30
        # on change la couleur du texte (foreground)
        monBouton["fg"] = "blue"
    else:
        # sinon si le texte n'était pas "Bonjour"
        monBouton["text"] = "Bonjour"
        monBouton["width"] = 20
        monBouton["fg"] = "green"

    # une autre façon de faire, avec les méthodes cget et config
    # à connaitre également si vous trouvez sur Internet des
    # programmes qui les utilisent
    # la méthode cget permet d'obtenir la valeur de la clé passée en paramètre
    # ici, on obtient le texte du bouton
#   if monBouton.cget("text") == "Bonjour":
#   # la méthode config permet de configure un paramètre, ici le texte du bouton
#       monBouton.config(text = "Au revoir ! ")
#       monBouton.config(width = 40)
#   else:
#       monBouton.config(text = "Bonjour")


fenetre = Tk() # on crée la fenêtre principale, elle se nomme fenetre
fenetre.geometry("300x50")  # on définit la taille de la fenêtre
fenetre.title("Un bouton") # le titre

# on crée un bouton,
# le paramètre 'command' permet d'indiquer quelle fonction
# doit être appelée en cas de clic sur le bouton, ici c'est la fonction "change"

monBouton = Button(fenetre,text = "Bonjour", width = 20,command=change)

# placement du widget monBouton dans la fenêtre

monBouton.pack()

fenetre.mainloop() # le programme va "surveiller" la fenêtre

"""<div class="alert alert-success" role="alert" align="center"><h2>Synthèse</h2></div>

- Quel paramètre peut-on rajouter à un bouton pour déclencher une action lorsqu'il est cliqué ? Avec quelle syntaxe ? …............................................................................….................................
- Que prend en paramètre la fonction appelée lors du clic sur le bouton ? …...................................
- Quel syntaxe pour modifier un paramètre d'un widget ? …............................................................
- Par exemple comment modifier le texte du bouton b ? …........................................................
- Par exemple comment modifier la largeur du bouton b ? ….....................................................
- Quel paramètre permet de modifier la couleur du texte d'un widget ? ….......................................
- Donnez deux exemples de valeurs qu'il peut prendre : …...............................................................
- Quel syntaxe alternative permet de lire la valeur d'un paramètre d'un widget w ? …....................
….....................................................................................................................................................
- Quel syntaxe alternative permet de modifier la valeur d'un paramètre d'un widget w ? …............
….....................................................................................................................................................

<h2 style="width:100%;text-align:left;color:darkorange;">
    Défi n˚ 4
</h2>

Écrire les lignes de code nécessaires pour obtenir cette fenêtre (largeur : 300 px, hauteur : 100 px, placée à 100 px du coin en haut à gauche, horizontalement et verticalement).  
État inital :  
![image.png](attachment:99e981f0-f5fb-4f92-b7f6-288474863481.png)  
Après un clic sur le bouton (zone de texte, bouton et titre modifiés) :  
![image.png](attachment:9b777393-ff20-45c4-8e11-accac2de34d8.png)

<h2 style="width:100%;text-align:right;color:blue;">
    Modifier des widgets via un bouton
</h2>

> Testez le code suivant :
"""

from tkinter import *

# on définit une fonction sans argument qui indique
# ce qui va se passer lors du clic sur le bouton "Cliquez ici !"

def action_clic():
    # on change le contenu de la zone de texte
    # (on peut même sauter à la ligne avec \n)
    zone_texte['text'] = "Bravo !\nVous avez cliqué sur le bouton"
    # autre syntxe possible:
    # zone_texte.config(text="Bravo !\nVous avez cliqué sur le bouton")

    # on place la zone de texte dans un encadré
    zone_texte['relief']=GROOVE # essayez FLAT / RAISED / SUNKEN / GROOVE / RIDGE

    # on peut définir la couleur grâce à son code RGB en hexadécimal
    # voir par exemple le site htmlcolorcodes.com
    zone_texte['fg'] = "#A81469" # on change la couleur de la police
    zone_texte['bg'] ="#A18050" # on change la couleur du background

    # on change le titre de la fenêtre
    fenetre.title("Action effectuée")

    # on ne détruit pas le widget bouton mais on l'oublie
    # il n'est plus placé sur la fenêtre donc il disparaît
    boutonClic.pack_forget()


# on définit une fonction sans argument qui indique
# ce qui va se passer lors du clic sur le bouton "Quitter"

def fermer():
    # la méthode destroy permet de détruire la fenêtre principale
    fenetre.destroy()


# on crée la fenêtre principale, avec son titre et sa taille

fenetre = Tk()
fenetre.title("Une action pour le bouton")
fenetre.geometry("300x100+100+100")

# on crée une zone de texte
zone_texte = Label(fenetre,text = "Cliquez sur le bouton ci-dessous")

# on crée un bouton "Cliquez ici !"
# le paramètre 'command' permet d'indiquer quelle fonction
# doit être appelée en cas de clic sur le bouton, ici c'est la fonction 'action_clic'
boutonClic = Button(fenetre,text = "Cliquez ici !", width = 20, command = action_clic)

# on crée un bouton "Quitter"
boutonQuitter = Button(fenetre,text = "Quitter", width = 20, command = fermer)


# on place la zone de texte, avec 3px au-dessus et en-dessous
zone_texte.pack(pady = 3)
# on place le bouton "Cliquez ici !"
boutonClic.pack()
# on fait apparaître le bouton Quitter
boutonQuitter.pack()

"""<div class="alert alert-success" role="alert" align="center"><h2>Synthèse</h2></div>

- Comment fait-on pour insérer de l'espace vertical entre des widgets ? …......................................
- Comment peut-on insérer un passage à la ligne dans une zone de texte ? …..................................
- Quel paramètre permet d'encadrer une zone de texte ? …...............................................................
- Faîtes une recherche Internet « relief tkinter ». Notez ce qui vous paraît intéressant : …..............
…......................................................................................................................................................
- Comment peut-on désigner une couleur quelconque pour le paramètre 'fg' ? …............................
- Sur quel site par exemple peut-on trouver et visualiser ces codes RGB ? …..................................
- Quel paramètre permet de modifier la couleur d'arrière plan d'un widget ? …...............................
- Comment faire disparaître un widget de l'écran ? ….......................................................................
- Quelle méthode permet de fermer la fenêtre ? …............................................................................

<h2 style="width:100%;text-align:left;color:darkorange;">
    Défi n˚ 5
</h2>

Écrire les lignes de code nécessaires pour obtenir cette fenêtre (choisissez des couleurs personnelles avec leur code en hexadécimal).

État inital :  
![image.png](attachment:9b1164f7-abd5-4a91-8ab9-e6d0f512c40b.png)  
Après un clic sur le bouton `Faire tout disparaître` :  
![image.png](attachment:7dc7c24c-6678-4489-b1a0-b5e18dac3048.png)
"""



"""<h2 style="width:100%;text-align:right;color:blue;">
    Travailler avec les zones de saisie
</h2>

> Testez le code suivant :
"""

from tkinter import *  # on importe le module tkinter

def envoi():
    # on récupère le texte entré dans la zone input (méthode get)
    adresseMail = maZoneInput.get()
    # on supprime le texte entré par l'utilisateur
    maZoneInput.delete(0,END)
    # on modifie la zone de texte
    monMessage['text'] = "Le mail a bien été envoyé à l'adresse\n" + adresseMail
    # ou monMessage.config(text = "Le mail a bien été envoyé à l'adresse " + adresseMail)


fenetre = Tk() # on crée la fenêtre principale, elle se nomme fenetre
fenetre.geometry("300x200+100+100")  # on définit la taille de la fenêtre
fenetre.title("Zone de saisie") # le titre

# création des widgets

# Zone de texte
monMessage = Label(fenetre,text = "Entrez votre adresse mail :") # texte

# zone de saisie
maZoneInput = Entry(fenetre)
# on insère un texte par défaut dans la zone de saisie (en position 0)
maZoneInput.insert(0,"...")
# la ligne ci-dessous permettrait de placer le curseur en position 0
#maZoneInput.icursor(0)
# on sélectionne le texte de la zone de saisie entre la position 0 et la fin
maZoneInput.selection_range(0,END)

# bouton envoyer, le paramètre command indique la fonction à executer en cas de clic
monBouton = Button(fenetre,text = "Envoyer",width = 20,command=envoi)

# placement des widgets dans la fenêtre
monMessage.pack(pady = 2)
maZoneInput.pack(pady = 2)
monBouton.pack(pady = 2)

# on positionne le curseur dans le champ d'entrée de texte
maZoneInput.focus()

fenetre.mainloop() # le programme va "surveiller" la fenêtre

"""<div class="alert alert-success" role="alert" align="center"><h2>Synthèse</h2></div>

- Comment fait on pour créer une zone de saisie ? …........................................................................
- Comment fait-on pour insérer un texte dans une zone de saisie ? …..............................................
- Comment fait-on pour positionner le curseur en position n dans une zone de saisie ? …..............
- Comment fait-on pour sélectionner le texte d'une zone de saisie entre la position n et la
position m : …..................................................................................................................................
- Quelle est l'indice de la première lettre d'une zone de saisie ? .......................................................
- De la dernière lettre ? …..................................................................................................................
- Comment fait on pour positionner le curseur dans une zone de saisie ? ….....................................
- Comment fait-on pour récupérer le texte entré dans une zone de saisie ? …..................................
- Comment fait-on pour supprimer le texte d'une zone de saisie ? …..............................................

<h2 style="width:100%;text-align:left;color:darkorange;">
    Défi n˚ 6 : une boîte à couleur
</h2>

Écrire les lignes de code nécessaires pour obtenir le petit programme graphique ci-dessous.  
On affichera la couleur dans un widget Label dont on modifiera le paramètre background (bg).  
Pour encadrer un widget, on peut utiliser le paramètre relief en mettant la valeur GROOVE  (donc relief = GROOVE).

État inital :  
![image.png](attachment:c16ce87c-0166-4fbf-ba92-d17c1d631237.png)  
Après avoir entré une couleur RGB :  
![image.png](attachment:201a43a0-452f-4142-84b8-ed2682ae5d0d.png)
"""



"""<h2 style="width:100%;text-align:left;color:darkorange;">
    Défi n˚ 7 : un convertisseur binaire
</h2>

Pour ce défi, utilisez plutôt vos fonctions de conversion binaire.
Écrire les lignes de code nécessaires pour obtenir ce petit programme graphique.

État inital :  
![image.png](attachment:8395b784-17fe-4a86-9aed-00e4a5e600d4.png)  
Conversion d'un nombre décimal :  
![image.png](attachment:1f9d0f66-c26e-4f36-a531-7dcaefb97a34.png)  
Conversion d'un nombre binaire :  
![image.png](attachment:02eb91fc-d5ac-4bc4-a8b9-dbae7b87c748.png)
"""



"""<h2 style="width:100%;text-align:left;color:darkorange;">
    Défi n˚ 8 : améliorations de notre convertisseur binaire
</h2>

On change désormais le texte `Le nombre converti` pour afficher en fonction des cas :  
` …. en binaire vaut : ` ou ` .... en décimal vaut : `.  
On affiche le nombre converti dans un widget `Entry` de manière à pouvoir copier la réponse et on fait en sorte que ce widget et ce qu'il contient soient présélectionnés.  

![image.png](attachment:7e15baf2-ee26-40e5-9fae-700a0a49528e.png)
"""

